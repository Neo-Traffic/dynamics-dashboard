import React, { Component } from 'react'
import SelectableCardList from 'components/SelectableCardList'
import Card from 'components/Card'
import { Link } from 'react-router-dom'
import Select from 'components/Select'

import api from 'library/api'

import { defineMessages, injectIntl } from 'react-intl'
import copy from 'copy-to-clipboard'

class GenerateURL extends Component {
  constructor (props) {
    super(props)

    this.state = {
      type: 'now',
      language: 'en-CA',
      apiKey: '',
      keys: []
    }
  }

  componentDidMount () {
    api.get('/keys').then(keys => {
      if (keys === null) return

      const formattedKeys = keys.filter(key =>
        key.dynamics.filter(dynamic =>
          dynamic.slug === 'weather').length > 0)
        .map(key => ({
          label: key.name,
          value: key.key
        }))

      this.setState({
        keys: formattedKeys,
        apiKey: formattedKeys[0].value
      })
    })
  }

  messages = defineMessages({
    generateURL: {
      id: 'dynamics.weather.generate-url',
      description: 'Screen where the user can generate a URL',
      defaultMessage: 'Generate URL',
    },
    contentType: {
      id: 'dynamics.weather.content-type',
      description: 'Type of weather that will be displayed',
      defaultMessage: 'Content type',
    },
    now: {
      id: 'dynamics.weather.content-type.now',
      description: 'Current weather',
      defaultMessage: 'Now',
    },
    forecast: {
      id: 'dynamics.weather.content-type.forecast',
      description: 'Next days weather',
      defaultMessage: 'Forecast',
    },
    national: {
      id: 'dynamics.weather.content-type.national',
      description: 'national weather',
      defaultMessage: 'National',
    },
    language: {
      id: 'dynamics.weather.language',
      description: 'Language in which the weather will be displayed',
      defaultMessage: 'Language',
    },
    english: {
      id: 'dynamics.weather.language.english',
      description: 'English broadcast',
      defaultMessage: 'English',
    },
    french: {
      id: 'dynamics.weather.language.french',
      description: 'French broadcast',
      defaultMessage: 'French',
    },
    APIKey: {
      id: 'dynamics.weather.APIKey',
      description: 'API Key used to authorize the dynamics when playing',
      defaultMessage: 'API Key',
    },
    generatedURL: {
      id: 'dynamics.weather.generated-url',
      description: 'URL generated by the Generate URL screen',
      defaultMessage: 'Generated URL',
    },
  })

  weatherTypes = [
    { value: 'now', label: this.props.intl.formatMessage(this.messages.now) },
    { value: 'forecast', label: this.props.intl.formatMessage(this.messages.forecast) },
    { value: 'national', label: this.props.intl.formatMessage(this.messages.national) },
  ]

  onWeatherTypeChanges = newType => {
    this.setState({ type: newType })
  }

  onLanguageChanges = newLanguage => {
    this.setState({ language: newLanguage })
  }

  onAPIKeyChanges = newKey => {
    this.setState({ apiKey: newKey })
  }

  languages = [
    { value: 'en-CA', label: this.props.intl.formatMessage(this.messages.english) },
    { value: 'fr-CA', label: this.props.intl.formatMessage(this.messages.french) },
  ]

  generateURL = () => {
    return 'https://weather.dynamics.ad-direct.ca/?content=' + this.state.type + '&lang=' + this.state.language + '&key=' + this.state.apiKey
  }

  copyURL = () => {
    copy(this.generateURL())
  }

  render () {
    return (
      <section className="content-column">
        <Link to="/dynamic/weather/" className="nav-back-upper-title">
          <span className="nav-back-arrow" >&lt;</span>
          Weather Dynamic
        </Link>
        <h1>{ this.props.intl.formatMessage(this.messages.generateURL) }</h1>
        <SelectableCardList
          label={ this.props.intl.formatMessage(this.messages.contentType) }
          items={ this.weatherTypes }
          onChange={this.onWeatherTypeChanges}/>
        <SelectableCardList
          label={ this.props.intl.formatMessage(this.messages.language) }
          items={ this.languages }
          onChange={this.onLanguageChanges}/>
        <Select
          label={ this.props.intl.formatMessage(this.messages.APIKey) }
          options={ this.state.keys }
          onChange={this.onAPIKeyChanges}/>
        <h5 className="jumbo-card-upper-title">
          { this.props.intl.formatMessage(this.messages.generatedURL) }
        </h5>
        <Card
          label={this.generateURL()}
          type="card-jumbo-size"
          onClick={this.copyURL}
        />
      </section>
    )
  }
}

export default injectIntl(GenerateURL)
